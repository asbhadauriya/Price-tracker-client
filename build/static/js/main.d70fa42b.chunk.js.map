{"version":3,"sources":["components/PriceTracker.jsx","App.js","reportWebVitals.js","index.js"],"names":["PriceTracker","useState","selectedStock","setSelectedStock","allStock","setAllStock","stockPrice","setStockPrice","fetchStockPrice","a","fetch","response","json","data","price","console","error","fetchAllStocks","useEffect","interval","setInterval","clearInterval","className","value","onChange","e","target","map","d","symbol","StockChart","useRef","labels","datasets","label","fill","borderColor","borderWidth","chartData","setChartData","newData","x","Date","toLocaleTimeString","y","prevData","options","responsive","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2OAyEeA,EAnEM,WACnB,MAA0CC,mBAAS,QAAnD,mBAAOC,EAAP,KAAsBC,EAAtB,KACA,EAA4BF,mBAAS,IAArC,mBAAMG,EAAN,KAAeC,EAAf,KACA,EAAoCJ,mBAAS,MAA7C,mBAAOK,EAAP,KAAmBC,EAAnB,KAEMC,EAAe,uCAAG,8BAAAC,EAAA,+EAEGC,MAAM,iEAAD,OAAkER,IAF1E,cAEdS,EAFc,gBAGDA,EAASC,OAHR,OAGdC,EAHc,OAIpBN,EAAcM,EAAKC,OAJC,kDAMpBC,QAAQC,MAAM,8BAAd,MANoB,0DAAH,qDASfC,EAAc,uCAAC,8BAAAR,EAAA,+EAEQC,MAAM,sEAFd,cAETC,EAFS,gBAGIA,EAASC,OAHb,OAGTC,EAHS,OAIfR,EAAYQ,GAJG,kDAMfE,QAAQC,MAAM,yBAAd,MANe,0DAAD,qDAqBpB,OAXAE,qBAAU,WACRD,MAEA,IAEFC,qBAAU,WACRV,IACA,IAAMW,EAAWC,YAAYZ,EAAiB,KAC9C,OAAO,kBAAMa,cAAcF,MAC1B,CAACjB,IAGF,gCACA,sBAAKoB,UAAU,OAAf,UACA,0DACA,2FAGE,sBAAKA,UAAU,SAAf,UACA,mBAAGA,UAAU,YAAb,+BACA,wBAAQC,MAAOrB,EAAesB,SAAU,SAAAC,GAAC,OAAItB,EAAiBsB,EAAEC,OAAOH,QAAvE,gBACCnB,QADD,IACCA,OADD,EACCA,EAAUuB,KAAI,SAACC,GACd,OAEE,wBAAQL,MAAOK,EAAEC,OAAjB,SAA0BD,EAAEC,iBAMxB,uBACN,sBAAMP,UAAU,OAAhB,UACD,kCAAKpB,KACY,OAAfI,EAAsB,sDAAwB,mCAAMA,QAAsB,2CAC3E,qBAAKgB,UAAU,QAAf,SAEA,cAAC,EAAD,CAAYR,MAAOR,EAAYJ,cAAeA,aAYhD4B,EAAa,SAAC,GAA2B,IAA1BhB,EAAyB,EAAzBA,MAAMZ,EAAmB,EAAnBA,cAEzB,GADiB6B,iBAAO,MACU9B,mBAAS,CACzC+B,OAAQ,GACRC,SAAU,CACR,CACEC,MAAO,cACPrB,KAAM,GACNsB,MAAM,EACNC,YAAa,wBACbC,YAAa,OARnB,mBAAOC,EAAP,KAAkBC,EAAlB,KAiDE,OArCJrB,qBAAU,WACVqB,EAAa,CAAGP,OAAQ,GACtBC,SAAU,CACR,CACEC,MAAOhC,EACPW,KAAM,GACNsB,MAAM,EACNC,YAAa,wBACbC,YAAa,QAIjB,CAACnC,IAIDgB,qBAAU,WAER,IAAMsB,EAAU,CACdC,GAAG,IAAIC,MAAOC,qBACdC,EAAG9B,GAGLyB,GAAa,SAACM,GAAD,MAAe,CAC1Bb,OAAO,GAAD,mBAAMa,EAASb,QAAf,CAAuBQ,EAAQC,IACrCR,SAAU,CAAC,2BAEJY,EAASZ,SAAS,IAFf,IAGNpB,KAAK,GAAD,mBAAMgC,EAASZ,SAAS,GAAGpB,MAA3B,CAAiC2B,EAAQI,aAOlD,CAAC9B,IAGA,8BACE,cAAC,IAAD,CAAMD,KAAMyB,EAAWQ,QAAS,CAAEC,YAAY,QCvHvCC,MATf,WACE,OACE,qBAAK1B,UAAU,MAAf,SACA,cAAC,EAAD,OCMW2B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.d70fa42b.chunk.js","sourcesContent":["import { Chart } from 'chart.js';\r\nimport React, { useState, useEffect, useRef } from 'react';\r\n\r\nimport { Line } from \"react-chartjs-2\";\r\n// import  ChartTrack  from './ChartTr';\r\n\r\nconst PriceTracker = () => {\r\n  const [selectedStock, setSelectedStock] = useState('AAPL');\r\n  const[allStock,setAllStock]=useState([]);\r\n  const [stockPrice, setStockPrice] = useState(null);\r\n\r\n  const fetchStockPrice = async () => {\r\n    try {\r\n      const response = await fetch(`https://price-tracker-4wvhqyk1m-asbhadauriya.vercel.app/stock/${selectedStock}`);\r\n      const data = await response.json();\r\n      setStockPrice(data.price);\r\n    } catch (error) {\r\n      console.error('Error fetching stock price:', error);\r\n    }\r\n  };\r\n  const fetchAllStocks=async()=>{\r\n    try {\r\n        const response = await fetch(`https://price-tracker-4wvhqyk1m-asbhadauriya.vercel.app/stocks/all`);\r\n        const data = await response.json();\r\n        setAllStock(data);\r\n      } catch (error) {\r\n        console.error('Error fetching stocks:', error);\r\n      }\r\n\r\n  }\r\n  useEffect(()=>{\r\n    fetchAllStocks();\r\n\r\n  },[])\r\n\r\n  useEffect(() => {\r\n    fetchStockPrice();\r\n    const interval = setInterval(fetchStockPrice, 1000); // Poll every minute\r\n    return () => clearInterval(interval);\r\n  }, [selectedStock]);\r\n\r\n  return (\r\n    <div>\r\n    <div className='head'>\r\n    <h1 >Mini Stock Price Tracker</h1>\r\n    <p>Select the stock from the list to see the lastest Price</p>\r\n    \r\n    </div>\r\n      <div className='select'>\r\n      <p className='para-head'>Pick Stock :-    </p>\r\n      <select value={selectedStock} onChange={e => setSelectedStock(e.target.value)}>\r\n      {allStock?.map((d)=>{\r\n        return(\r\n          \r\n          <option value={d.symbol}>{d.symbol}</option>\r\n          )\r\n          \r\n        })}\r\n        {/* Add more stock options */}\r\n        </select>\r\n        </div><br/>\r\n        <div  className='head'>\r\n       <b> {selectedStock}</b>\r\n        {stockPrice !== null ? <p>Current Market Price:<b> ${stockPrice}</b></p> : <p>Loading...</p>}\r\n        <div className='chart'>\r\n\r\n        <StockChart price={stockPrice} selectedStock={selectedStock}/>\r\n        </div>\r\n        </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PriceTracker;\r\n\r\n\r\n\r\n\r\nconst StockChart = ({price,selectedStock}) => {\r\n  const chartRef = useRef(null);\r\n  const [chartData, setChartData] = useState({\r\n    labels: [],\r\n    datasets: [\r\n      {\r\n        label: 'Stock Price',\r\n        data: [],\r\n        fill: false,\r\n        borderColor: 'rgba(75, 192, 192, 1)',\r\n        borderWidth: 1,\r\n      },\r\n    ],\r\n  });\r\nuseEffect(()=>{\r\nsetChartData({  labels: [],\r\n  datasets: [\r\n    {\r\n      label: selectedStock,\r\n      data: [],\r\n      fill: false,\r\n      borderColor: 'rgba(75, 192, 192, 1)',\r\n      borderWidth: 1,\r\n    },\r\n  ],\r\n})\r\n},[selectedStock])\r\n\r\n\r\n  // Simulate receiving data from the API every second\r\n  useEffect(() => {\r\n \r\n    const newData = {\r\n      x: new Date().toLocaleTimeString(),\r\n      y: price, // Replace with your actual API data\r\n    };\r\n\r\n    setChartData((prevData) => ({\r\n      labels: [...prevData.labels, newData.x],\r\n      datasets: [\r\n        {\r\n          ...prevData.datasets[0],\r\n          data: [...prevData.datasets[0].data, newData.y],\r\n        },\r\n      ],\r\n    }));\r\n\r\n\r\n  \r\n  }, [price]);\r\n  \r\n    return (\r\n      <div>\r\n        <Line data={chartData} options={{ responsive: true }} />\r\n      </div>\r\n    );\r\n  };\r\n  \r\n  \r\n\r\n\r\n\r\n\r\n\r\n","import PriceTracker from \"./components/PriceTracker\";\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n    <PriceTracker/>\n      \n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}